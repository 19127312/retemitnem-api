#!/usr/bin/env node

/**
 * Module dependencies.
 */
const monoogse = require("mongoose");
const dotev = require("dotenv").config();
var debug = require("debug")("quizapi:server");
const http = require("http");
const { Server } = require("socket.io");

const DB = process.env.DATABASE;
const app = require("../app");

monoogse
  .connect(DB)
  .then(() => {
    console.log("DB connect successfuslly!");

    const port = normalizePort(process.env.PORT || "3000");
    app.set("port", port);

    /**
     * Create HTTP server.
     */

    const server = http.createServer(app);
    const io = new Server(server, {
      cors: {
        origin: "http://localhost:3001",
        methods: ["GET", "POST"],
      },
    });

    io.on("connection", function (socket) {
      console.log(`User Connected: ${socket.id}`);
      socket.on("join_presentation", (data) => {
        console.log("Join presentation", data);
        socket.join(data);
      });
      socket.on("submit_result", (data) => {
        console.log("Presentation ID Result submit", data);
        socket.to(data._id).emit("onSubmitResult", data); // Gửi vào room có chứa id của presentation
      });

      //Whenever someone disconnects this piece of code executed
      socket.on("disconnect", function () {
        console.log("A user disconnected");
      });
    });

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on("error", onError);
    server.on("listening", () => onListening(server, debug));
  })
  .catch((err) => {
    console.log("Unable to connect to the database:", err);
  });
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server, debug) {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
